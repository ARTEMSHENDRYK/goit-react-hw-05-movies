{"version":3,"file":"static/js/884.b9fc0240.chunk.js","mappings":"mXAEMA,EAAS,CACbC,QAAS,mCACTC,SAAU,SAGL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8GAEoBC,EAAAA,EAAAA,GAAM,mDAAoD,CAAEC,OAAQL,IAFxF,cAEGM,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAMHC,QAAQC,IAAR,MANG,gFAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,iGAEoBR,EAAAA,EAAAA,GAAM,mDAAD,OAAoDQ,EAApD,+BAA8F,CAAEP,OAAQL,IAFjI,cAEGM,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAMHC,QAAQC,IAAR,MANG,gFAUA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,iGAEoBV,EAAAA,EAAAA,GAAM,sCAAD,OAAuCU,EAAvC,KAAmD,CAAET,OAAQL,IAFtF,cAEGM,EAFH,yBAGIA,EAASC,MAHb,gCAMHE,QAAQC,IAAR,MANG,gFAUA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,iGAEoBV,EAAAA,EAAAA,GAAM,sCAAD,OAAuCU,EAAvC,aAA2D,CAAET,OAAQL,IAF9F,cAEGM,EAFH,yBAGIA,EAASC,KAAKS,MAHlB,gCAMHP,QAAQC,IAAR,MANG,gFAUA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,iGAEoBV,EAAAA,EAAAA,GAAM,sCAAD,OAAuCU,EAAvC,mBAAiE,CAAET,OAAQL,IAFpG,cAEGM,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAMHC,QAAQC,IAAR,MANG,gFAUP,IAAMQ,EAAgB,CACpBf,YAAAA,EACAQ,gBAAAA,EACAE,gBAAAA,EACAE,gBAAAA,EACAE,gBAAAA,GAGF,W,iHCPA,UAtDqB,WAAO,IAAD,IACzB,GAAwCE,EAAAA,EAAAA,YAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACQP,GAAYQ,EAAAA,EAAAA,MAAZR,QACFS,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAY3D,OAXAnB,QAAQC,IAAIe,IAEZI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,qGACDjB,EAAAA,EAAAA,iBAAgBC,GADf,OAClBR,EADkB,OAExBe,EAAgBf,GAFQ,2CAAH,qDAKvBwB,GACD,GAAE,CAAChB,KAGF,iCACE,SAAC,EAAAiB,KAAD,CAAMC,GAAIP,EAAoBQ,QAA9B,SAAuC,WACtCb,IACC,4BACE,gBACEc,IAAG,0CAAqCd,EAAae,aACrDC,IAAKhB,EAAaiB,SAEpB,4BACE,kCAAQjB,EAAaiB,MAArB,aAA+BjB,EAAakB,aAAaC,UAAU,EAAG,GAAtE,QACA,yBAAG,eAAaC,KAAKC,MAAkC,GAA5BrB,EAAasB,cAAmB,QAC3D,wBAAI,eACJ,uBAAItB,EAAauB,YACjB,wBAAI,YACJ,uBACCvB,EAAawB,OAAOC,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAC9B,OACE,0BAAgBA,GAALD,EACX,UAGN,wBAAI,4BACJ,2BACE,yBACE,SAAC,EAAAf,KAAD,CAAMC,GAAG,OAAT,SAAgB,YAElB,yBACE,SAAC,EAAAD,KAAD,CAAMC,GAAG,UAAT,SAAmB,eAErB,SAAC,KAAD,YAMX,C","sources":["api/TheMovieDB.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst PARAMS = {\n  api_key: \"e11933f426665230c05914275e20f129\",\n  language: \"en-US\",\n}\n\nexport async function getTrending() {\n  try {\n    const response = await axios(\"https://api.themoviedb.org/3/trending/movie/day?\", { params: PARAMS });\n    return response.data.results;\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getSearchMovies(searchQuery) {\n  try {\n    const response = await axios(`https://api.themoviedb.org/3/search/movie?query=${searchQuery}&include_adult=false&page=1`, { params: PARAMS });\n    return response.data.results;\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n  try {\n    const response = await axios(`https://api.themoviedb.org/3/movie/${movieId}?`, { params: PARAMS });\n    return response.data;\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCredits(movieId) {\n  try {\n    const response = await axios(`https://api.themoviedb.org/3/movie/${movieId}/credits?`, { params: PARAMS });\n    return response.data.cast;\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const response = await axios(`https://api.themoviedb.org/3/movie/${movieId}/reviews?page=1`, { params: PARAMS });\n    return response.data.results;\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nconst TheMovieDBAPI = {\n  getTrending,\n  getSearchMovies,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n}\n\nexport default TheMovieDBAPI;","import { useEffect, useRef, useState } from \"react\";\nimport { Link, Outlet, useLocation, useParams } from \"react-router-dom\";\nimport { getMovieDetails } from \"api/TheMovieDB\";\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState();\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n  console.log(backLinkLocationRef);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      const response = await getMovieDetails(movieId);\n      setMovieDetails(response);\n    }\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  return (\n    <>\n      <Link to={backLinkLocationRef.current}>Return</Link>\n      {movieDetails &&\n        <div>\n          <img\n            src={`https://image.tmdb.org/t/p/w200/${movieDetails.poster_path}`}\n            alt={movieDetails.title}\n          />\n          <div>\n            <h2>{`${movieDetails.title} (${movieDetails.release_date.substring(0, 4)})`}</h2>\n            <p>User score: {Math.round(movieDetails.vote_average * 10)}%</p>\n            <h3>Overview:</h3>\n            <p>{movieDetails.overview}</p>\n            <h4>Genres</h4>\n            <p>\n            {movieDetails.genres.map(({ id, name }) => {\n              return (\n                <span key={id}>{name}</span>\n              )})}\n            </p>\n          </div>\n          <h3>Additional information</h3>\n          <ul>\n            <li>\n              <Link to=\"cast\">Cast</Link>\n            </li>\n            <li>\n              <Link to=\"reviews\">Reviews</Link>\n            </li>\n            <Outlet />\n          </ul>\n        </div>  \n      }\n    </>\n  )  \n}\n\nexport default MovieDetails;\n"],"names":["PARAMS","api_key","language","getTrending","axios","params","response","data","results","console","log","getSearchMovies","searchQuery","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","TheMovieDBAPI","useState","movieDetails","setMovieDetails","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","fetchMovieDetails","Link","to","current","src","poster_path","alt","title","release_date","substring","Math","round","vote_average","overview","genres","map","id","name"],"sourceRoot":""}