{"version":3,"file":"static/js/134.e668e389.chunk.js","mappings":"mXAEMA,EAAS,CACbC,QAAS,mCACTC,SAAU,SAGL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8GAEoBC,EAAAA,EAAAA,GAAM,mDAAoD,CAAEC,OAAQL,IAFxF,cAEGM,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAMHC,QAAQC,IAAR,MANG,gFAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,iGAEoBR,EAAAA,EAAAA,GAAM,mDAAD,OAAoDQ,EAApD,+BAA8F,CAAEP,OAAQL,IAFjI,cAEGM,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAMHC,QAAQC,IAAR,MANG,gFAUA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,iGAEoBV,EAAAA,EAAAA,GAAM,sCAAD,OAAuCU,EAAvC,KAAmD,CAAET,OAAQL,IAFtF,cAEGM,EAFH,yBAGIA,EAASC,MAHb,gCAMHE,QAAQC,IAAR,MANG,gFAUA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,iGAEoBV,EAAAA,EAAAA,GAAM,sCAAD,OAAuCU,EAAvC,aAA2D,CAAET,OAAQL,IAF9F,cAEGM,EAFH,yBAGIA,EAASC,KAAKS,MAHlB,gCAMHP,QAAQC,IAAR,MANG,gFAUA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,iGAEoBV,EAAAA,EAAAA,GAAM,sCAAD,OAAuCU,EAAvC,mBAAiE,CAAET,OAAQL,IAFpG,cAEGM,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAMHC,QAAQC,IAAR,MANG,gFAUP,IAAMQ,EAAgB,CACpBf,YAAAA,EACAQ,gBAAAA,EACAE,gBAAAA,EACAE,gBAAAA,EACAE,gBAAAA,GAGF,W,iHCaA,UA1Ee,WAAO,IAAD,EACnB,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMZ,EAAW,UAAGW,EAAaE,IAAI,gBAApB,QAAgC,GAC3CC,GAAWC,EAAAA,EAAAA,MAqCjB,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,qGACDlB,EAAAA,EAAAA,iBAAgBC,GADf,OAClBN,EADkB,OAExBe,EAAUf,GAFc,2CAAH,qDAKnBM,GACFiB,GAGH,GAAE,CAACjB,KAIF,iCACE,kBAAMkB,SA/BW,SAACC,GAGpB,GAFAA,EAAIC,iBAECpB,EAAYqB,OAAjB,CAKA,IAAMJ,EAAiB,mCAAG,qGACDlB,EAAAA,EAAAA,iBAAgBC,GADf,OAClBN,EADkB,OAExBe,EAAUf,GAFc,2CAAH,qDAKvBuB,GAPC,MAFCK,MAAM,4BAUT,EAiBG,WACE,kBACEC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,MAAO3B,EACP4B,SA5CkB,SAACT,GACzBA,EAAIU,OAAOF,MAAMG,cACblB,EAAgB,CAAEmB,MAAOZ,EAAIU,OAAOF,MAAMG,gBAC1ClB,EAAgB,CAAC,EACtB,KA0CK,mBAAQW,KAAK,SAAb,UACE,0BAAO,gBAGVf,EAAOwB,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjB,OACE,SAAC,EAAAC,KAAD,CAEEC,GAAE,kBAAaH,GACfI,MAAO,CAAEC,KAAMxB,GAHjB,UAIE,yBACE,wBACGoB,OALAD,EAUV,MAGN,C","sources":["api/TheMovieDB.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst PARAMS = {\n  api_key: \"e11933f426665230c05914275e20f129\",\n  language: \"en-US\",\n}\n\nexport async function getTrending() {\n  try {\n    const response = await axios(\"https://api.themoviedb.org/3/trending/movie/day?\", { params: PARAMS });\n    return response.data.results;\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getSearchMovies(searchQuery) {\n  try {\n    const response = await axios(`https://api.themoviedb.org/3/search/movie?query=${searchQuery}&include_adult=false&page=1`, { params: PARAMS });\n    return response.data.results;\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n  try {\n    const response = await axios(`https://api.themoviedb.org/3/movie/${movieId}?`, { params: PARAMS });\n    return response.data;\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCredits(movieId) {\n  try {\n    const response = await axios(`https://api.themoviedb.org/3/movie/${movieId}/credits?`, { params: PARAMS });\n    return response.data.cast;\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const response = await axios(`https://api.themoviedb.org/3/movie/${movieId}/reviews?page=1`, { params: PARAMS });\n    return response.data.results;\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nconst TheMovieDBAPI = {\n  getTrending,\n  getSearchMovies,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n}\n\nexport default TheMovieDBAPI;","import { getSearchMovies } from \"api/TheMovieDB\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get(\"query\") ?? \"\";\n  const location = useLocation();\n\n  const handleInputChange = (evt) => {\n    evt.target.value.toLowerCase()\n      ? setSearchParams({ query: evt.target.value.toLowerCase() })\n      : setSearchParams({});\n  } \n  \n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (!searchQuery.trim()) {\n      alert(\"Some search query needed.\");\n      return;\n    }\n    \n    const fetchSearchMovies = async () => {\n      const response = await getSearchMovies(searchQuery);\n      setMovies(response);\n    }\n\n    fetchSearchMovies();\n  }\n\n  useEffect(() => {\n    const fetchSearchMovies = async () => {\n      const response = await getSearchMovies(searchQuery);\n      setMovies(response);\n    }\n\n    if (searchQuery) {\n      fetchSearchMovies();\n    }\n\n  }, [searchQuery]);\n\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie\"\n          value={searchQuery}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">\n          <span >Search</span>\n        </button>\n      </form>\n      {movies.map(({ id, title }) => {\n        return (\n          <Link\n            key={id}\n            to={`/movies/${id}`}\n            state={{ from: location }}>\n            <ul>\n              <li>\n                {title}\n              </li>\n            </ul>\n          </Link>\n        )\n      })}\n    </>\n  )  \n}\n\nexport default Movies;"],"names":["PARAMS","api_key","language","getTrending","axios","params","response","data","results","console","log","getSearchMovies","searchQuery","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","TheMovieDBAPI","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","location","useLocation","useEffect","fetchSearchMovies","onSubmit","evt","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","value","onChange","target","toLowerCase","query","map","id","title","Link","to","state","from"],"sourceRoot":""}